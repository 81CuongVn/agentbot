const { MessageEmbed, MessageAttachment } = require("discord.js");
const db = require('quick.db');
const shipDb = new db.table('shipDb');
const moment = require('moment');
const { getMember } = require('../../functions/utils');
module.exports = {
    name: "ship",
    category: "fun",
    description: "Shippppppp",
    usage: "<PREFIX>ship [@tag]",
    note: "<PREFIX>ship rename ƒë·ªÉ rename t√™n \n<PREFIX>ship sink ƒë·ªÉ ph√° thuy·ªÅn",
    cooldown: 20,
    run: async (client, message, args) => {
        const embed = new MessageEmbed();
        const authorData = await shipDb.get(message.author.id);
        const member = await getMember(message, args.join(' '), false);
        switch (args[0]) {
            case 'rename':
                if (!authorData) return message.channel.send('B·∫°n kh√¥ng c√≥ thuy·ªÅn!');
                const newName = args.slice(1).join(' ');
                await shipDb.set(`${message.author.id}.shipName`, newName);
                await shipDb.set(`${authorData.target.id}.shipName`, newName);
                message.channel.send('‚úÖ | Thao t√°c th√†nh c√¥ng!');
                break;
            case 'sink':
            case 'sank':
            case 'ch√¨m':
                if (!authorData) return message.channel.send('B·∫°n kh√¥ng c√≥ thuy·ªÅn!');
                await shipDb.delete(message.author.id);
                await shipDb.delete(authorData.target.id);
                message.channel.send('B·∫°n ƒë√£ cho ch√¨m t√†u üíî');
                break;
            default: {
                if (member && authorData && (member.id !== authorData.target.id)) return message.channel.send('B·∫°n ƒë√£ c√≥ thuy·ªÅn r·ªìi!');
                if (!authorData) {
                    if (!member) return message.channel.send('B·∫°n hi·ªán t·∫°i kh√¥ng ship v·ªõi ai!');
                    else {
                            if (member.id == message.author.id) return message.channel.send('B·∫°n kh√¥ng th·ªÉ ship v·ªõi ch√≠nh m√¨nh.');
                            if (shipDb.has(member.id)) return message.channel.send('Ng∆∞·ªùi b·∫°n tag ƒë√£ c√≥ thuy·ªÅn!');
                            // b·∫Øt ƒë·∫ßu ship xD
                            const filter = m => m.author.id == member.id;
                            const msg = await message.channel.send(`${member}, b·∫°n c√≥ mu·ªën l√™n thuy·ªÅn c√πng **${message.member.nickname}** kh√¥ng?\nNh·∫≠p **accept** ƒë·ªÉ ƒë·ªìng √Ω!`);
                            const collector = msg.channel.createMessageCollector(filter, { time: 15000 });

                            collector.on('collect', async m => {
                                if (m.content.toLowerCase() == 'accept') {
                                    const shipName = `${message.author.username.slice(0, 3)} v√† ${member.user.username.slice(0, 3)}`;
                                    await setDefault(message.author, member, shipName);
                                    await setDefault(member, message.author, shipName);
                                    message.channel.send(`üö¢ Thuy·ªÅn **${shipName}** ƒë√£ ƒë∆∞·ª£c ƒë·∫©y.\nƒê·ªÉ ƒë·ªïi t√™n thuy·ªÅn h√£y nh·∫≠p l·ªánh \`ship rename\`!\nƒê·ªÉ ch√¨m thuy·ªÅn h√£y s·ª≠ d·ª•ng l·ªánh \`ship sink\`!`);
                                    collector.stop();
                                } else if (m.content.toLowerCase() == 'decline') {
                                    collector.stop('tuchoi');
                                }
                            });

                            collector.on('end', async (_, reason) => {
                                if (reason == 'tuchoi') return message.channel.send('B·∫°n ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi l√™n thuy·ªÅn!');
                                else if (reason == 'time') {
                                    if (msg.deletable) msg.delete();
                                    return message.channel.send('L·ªùi m·ªùi h·∫øt h·∫°n!');
                                }
                            });
                        }
                } else {
                    // deconstruct
                    const { hugs, slaps, spank, kiss, cookie, pat, poke, since, punch } = authorData.target;
                    const targetData = await shipDb.get(authorData.target.id);
                    const { readFileSync } = require('fs');
                    const ship = readFileSync('././assets/images/ship.png');
                    const attachment = new MessageAttachment(ship, 'ship.png');
                    let arrTuongTac = [
                        hugs + targetData.target.hugs !== 0 ? `ü§ó √îm: ${hugs + targetData.target.hugs}` : '',
                        slaps + targetData.target.slaps !== 0 ? `ü§ö T√°t: ${slaps + targetData.target.slaps}` : '',
                        spank + targetData.target.spank !== 0 ? `üçë T√©t: ${spank + targetData.target.spank}` : '',
                        kiss + targetData.target.kiss !== 0 ? `üíã H√¥n: ${kiss + targetData.target.kiss}` : '',
                        cookie + targetData.target.cookie !== 0 ? `üç™ B√°nh quy: ${cookie + targetData.target.cookie}` : '',
                        punch + targetData.target.punch !== 0 ? `üëä ƒê·∫•m: ${punch + targetData.target.punch}` : '',
                        pat + targetData.target.pat !== 0 ? `üëã V·ªó ƒë·∫ßu: ${pat + targetData.target.pat}` : '',
                        poke + targetData.target.poke !== 0 ? `üëâ Ch·ªçc: ${poke + targetData.target.poke}` : '',
                    ];
                    arrTuongTac = arrTuongTac.filter(x => x);
                    embed.setAuthor(authorData.shipName, message.guild.iconURL())
                        .attachFiles(attachment)
                        .setThumbnail('attachment://ship.png')
                        .addField(`C·∫∑p ƒë√¥i: `, `${message.author} v√† <@${authorData.target.id}>`)
                        .addField('T∆∞∆°ng t√°c: ', arrTuongTac.length !== 0 ? arrTuongTac : 'Ch∆∞a c√≥ g√¨ c·∫£')
                        .addField('Thuy·ªÅn t·∫°o v√†o: ', moment(since).fromNow());
                    message.channel.send(embed);
                }
            }
        }
    },
};
async function setDefault(first, second, shipName) {
    if (!first || !second || !shipName) return;
    await shipDb.set(first.id, {
        shipName: shipName,
        target: {
            id: second.id,
            hugs: 0,
            slaps: 0,
            spank: 0,
            kiss: 0,
            cookie: 0,
            pat: 0,
            punch: 0,
            poke : 0,
            since: Date.now(),
        },
    });
}